#include <atomic>
#include <future>
#include <condition_variable> 
#include <mutex>

#include <linux/tcp.h>
#include <unistd.h>
#include <poll.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
// #include <linux/tcp.h>
#include <netdb.h>
#include <errno.h>
#include <arpa/inet.h>

#include "net/client.h"
#include "util/io.h"
#include "log/log.h"


namespace ssync {
namespace net {
	void create_proxy(int& client_fd, int& proxy_fd) {
		struct sockaddr_in client_addr;
		struct sockaddr_in server_addr;
		int one = 1;

		memset(&client_addr, 0, sizeof(client_addr));
		client_addr.sin_family = AF_INET;
		client_addr.sin_port = htons(3131);
		inet_pton(AF_INET, "127.0.0.1", &client_addr.sin_addr);
		
		memset(&server_addr, 0, sizeof(server_addr));
		server_addr.sin_family = AF_INET;
		server_addr.sin_port = htons(3131);
		inet_pton(AF_INET, "127.0.0.1", &server_addr.sin_addr);

		std::atomic<bool> accepting(false);
		
		std::thread thr([&] {
				if ((proxy_fd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
					throw ClientException("could not create socket");
				if (setsockopt(proxy_fd, SOL_SOCKET, SO_REUSEADDR, (char *)&one,
							sizeof(one)) < 0)
					throw ClientException("could not set SO_REUSEADDR");
				if (bind(proxy_fd, (struct sockaddr *)&server_addr,
							sizeof(server_addr)) < 0)
					throw ClientException("could not bind");
				if (listen(proxy_fd, 1) < 0)
					return;
				accepting = true;
				proxy_fd = accept(proxy_fd, NULL, NULL);
				accepting = false;
			});
		
		while(!accepting) {}
		if ((client_fd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
			throw ClientException("could not create socket");
		if (connect(client_fd, (const struct sockaddr *)&client_addr, sizeof(struct sockaddr_in)))
			throw ClientException("could not connect");

		// join with the thread.
		thr.join();
	}

	void run_proxy(int fd, std::shared_ptr<SSH::SSHChannel> chan) {
		char *buffer_local, *buffer_remote;
		int idx_local_start, idx_local_end;
		int idx_remote_start, idx_remote_end;
		struct tcp_info ti;
		int buffer_len;
		int ret;
		socklen_t len = sizeof(struct tcp_info);
		if (getsockopt(chan->socket(), IPPROTO_TCP, TCP_INFO, &ti, &len) == -1)
			throw ClientException("could not get tcpinfo");

		// proxy the ssh connection
		buffer_len = ti.tcpi_snd_mss > ti.tcpi_rcv_mss ? ti.tcpi_snd_mss : ti.tcpi_rcv_mss;
		buffer_local = new char(buffer_len);
		buffer_remote = new char(buffer_len);

		struct pollfd fds[2];
		fds[0].fd = fd;
		fds[0].events = POLLIN | POLLOUT | POLLWRBAND;
		fds[1].fd = chan->socket();
		fds[1].events = POLLIN | POLLOUT | POLLWRBAND;

		idx_local_start = idx_remote_start = 0;
		idx_local_end = idx_remote_end = 0;
		for (;;) {
			ret = poll(fds, 2, -1);
			if (ret == -1) {
				if (errno == EINTR)
					continue;
				throw ClientException("could not poll for file descriptors");
			}
			
			if (fds[0].revents & POLLIN && idx_local_start == 0 
					&& idx_local_end < buffer_len) {
				ret = ::read(fd, buffer_local + idx_local_end,
						buffer_len - idx_local_end);
				log::console->info("read fd: {}", ret);
				if (ret > 0)
					idx_local_end += ret;
			}

			if (fds[1].revents & POLLIN && idx_remote_start == 0
					&& idx_remote_end < buffer_len) {
				ret = chan->read(buffer_remote+idx_remote_end,
						buffer_len-idx_remote_end);
				log::console->info("read chan: {}", ret);
				if (ret > 0)
					idx_remote_end += ret;
			}
									
			if (idx_remote_end && (POLLOUT | POLLWRBAND) & fds[1].revents) {
				ret = ::write(fd, buffer_remote+idx_remote_start,
						idx_remote_end - idx_remote_start);
				log::console->info("write fd: {}", ret);
				if (ret > 0) {
					idx_remote_start += ret;
					if (idx_remote_start == idx_remote_end)
						idx_remote_start = idx_remote_end = 0;
				}
			}

			if (idx_local_end && (POLLOUT | POLLWRBAND) & fds[1].revents) {
				ret = chan->write(buffer_local + idx_local_start,
						idx_local_end - idx_local_start);
				log::console->info("write chan: {}", ret);
				if (ret > 0) {
					idx_local_start += ret;
					if (idx_local_start == idx_local_end)
						idx_local_start = idx_local_end = 0;
				}
			}

			if (fds[0].revents & POLLHUP || fds[1].revents & POLLHUP)
				break;
		}

		delete buffer_local;
		delete buffer_remote;
	}
}
}
